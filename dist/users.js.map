{"version":3,"sources":["../server/users.js"],"names":["express","require","bodyParser","router","Router","use","json","urlencoded","extended","datas","owners","messageList","type","sender","receiver","data","text","get","request","response","setHeader","user","params","personInTalk","userdata","find","element","undefined","post","req","res","reqBody","body","message","newdata","push"],"mappings":"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","file":"users.js","sourcesContent":["var express = require('express')\nvar bodyParser = require('body-parser');\n\n// var app = express();\nvar router = express.Router()\n\n// router.use('/', ()=> {console.log(\"2!!!\")})\nrouter.use(bodyParser.json());\nrouter.use(bodyParser.urlencoded({ extended: false }));\n\nlet datas = [\n    {  \n        owners: 'Alice&Bob',\n        messageList:\n        [\n            { type: 'text', sender:\"Alice\", receiver:\"Bob\", data: { text: \"Why don't they have salsa on the table?\" } },\n            { type: 'text', sender:\"Bob\", receiver:\"Alice\", data: { text: \"What do you need salsa for?\" } },\n            { type: 'text', sender:\"Bob\", receiver:\"Alice\", data: { text: \"Salsa is now the number one condiment in America.\" } },\n            { type: 'text', sender:\"Alice\", receiver:\"Bob\", data: { text: \"You know why? Because people like to say 'salsa.' 'Excuse me, do you have salsa?' 'We need more salsa.' 'Where is the salsa? No salsa?'\" } }\n        ]\n    },\n    {\n        owners: 'Alice&Christ',\n        messageList:\n        [\n            { type: 'text', sender: \"Christ\", receiver: \"Alice\", data: { text: \"Why don't they have salsa on the table?\" } },\n            { type: 'text', sender: \"Alice\", receiver: \"Christ\", data: { text: \"What do you need salsa for?\" } },\n        ]\n    },\n    {\n        owners: 'Alice&David',\n        messageList:\n            [\n                { type: 'text', sender: \"David\", receiver: \"Alice\", data: { text: \"Hi, it's David\" } },\n                { type: 'text', sender: \"Alice\", receiver: \"David\", data: { text: \"Hey, I'm Alice\" } },\n            ]\n    },\n    {\n        owners: 'Alice&Evan',\n        messageList:\n            []\n    },\n    {\n        owners: 'Bob&Christ',\n        messageList:\n            []\n    },\n    {\n        owners: 'Bob&David',\n        messageList:\n            []\n    },\n    {\n        owners: 'Bob&Evan',\n        messageList:\n            []\n    },\n    {\n        owners: 'Christ&David',\n        messageList:\n            []\n    },\n    {\n        owners: 'Christ&Evan',\n        messageList:\n            []\n    },\n    {\n        owners: 'David&Evan',\n        messageList:\n            []\n    },\n]\nrouter.get('/:user/:personInTalk', function (request, response) {\n\n    response.setHeader(\"Access-Control-Allow-Origin\", '*');\n    let user = request.params.user;\n    let personInTalk = request.params.personInTalk;\n    let userdata = datas.find((element) => {\n        return ((element.owners === `${user}&${personInTalk}`) || (element.owners === `${personInTalk}&${user}`))\n    });\n\n    if (userdata != undefined){\n        response.json(userdata.messageList);\n    }\n    else {\n        response.json([]);\n    }\n});\n\nrouter.post('/update', function (req, res) {\n\n    let reqBody = req.body;\n    let type = reqBody.type;\n    let sender = reqBody.sender;\n    let receiver = reqBody.receiver;\n    let message = reqBody.message;\n    let newdata = { type: type, sender: sender, receiver: receiver, data: message};\n\n    let userdata = datas.find((element) => {\n        return ((element.owners === `${sender}&${receiver}`) || (element.owners === `${receiver}&${sender}`))\n    });\n    userdata.messageList.push(newdata);\n    \n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    res.json(newdata);\n\n});\n\nexport default  router;"]}